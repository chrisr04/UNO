/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;


import java.text.NumberFormat;
import java.text.ParsePosition;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import logica.Carta;
import logica.UnoImplementacion;


/**
 *
 * @author Christian Rodriguez
 * 
 */
public class UnoInterfazGrafica extends javax.swing.JFrame {

    UnoImplementacion implementacion;
      
    /**
     * Creates new form UnoInterfazGrafica
     */
    public UnoInterfazGrafica() {
        
        initComponents();
        implementacion = new UnoImplementacion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Baraja = new javax.swing.JLabel();
        Desecho = new javax.swing.JLabel();
        mano = new javax.swing.JScrollPane();
        pCartas = new javax.swing.JPanel();
        tomarCarta = new javax.swing.JButton();
        decirUNO = new javax.swing.JButton();
        cambiarTurno = new javax.swing.JButton();
        ponerCarta = new javax.swing.JButton();
        jugadorTurno = new javax.swing.JLabel();
        cartasBarajaLbl = new javax.swing.JLabel();
        cartasDesechoLbl = new javax.swing.JLabel();
        cambioColorLbl = new javax.swing.JLabel();
        penalizar = new javax.swing.JButton();
        cerrarSesion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Partida");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Baraja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cartas/dorso.png"))); // NOI18N
        Baraja.setText("jLabel1");

        Desecho.setText("Desecho");

        pCartas.setLayout(new java.awt.GridLayout(1, 0));
        mano.setViewportView(pCartas);

        tomarCarta.setText("Comer");
        tomarCarta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tomarCartaActionPerformed(evt);
            }
        });

        decirUNO.setText("UNO");
        decirUNO.setEnabled(false);
        decirUNO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decirUNOActionPerformed(evt);
            }
        });

        cambiarTurno.setText("Cambiar Turno");
        cambiarTurno.setEnabled(false);
        cambiarTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTurnoActionPerformed(evt);
            }
        });

        ponerCarta.setText("Poner");
        ponerCarta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ponerCartaActionPerformed(evt);
            }
        });

        jugadorTurno.setText("jLabel1");

        cartasBarajaLbl.setText("jLabel1");
        cartasBarajaLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        cartasDesechoLbl.setText("jLabel1");
        cartasDesechoLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        cambioColorLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cambioColorLbl.setText("                     ");

        penalizar.setText("Penalizar");
        penalizar.setEnabled(false);
        penalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penalizarActionPerformed(evt);
            }
        });

        cerrarSesion.setText("Cerra Sesi√≥n");
        cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarSesionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mano)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tomarCarta)
                            .addComponent(jugadorTurno)
                            .addComponent(cambiarTurno)
                            .addComponent(cerrarSesion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Baraja, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cartasBarajaLbl))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Desecho, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cartasDesechoLbl))
                        .addGap(107, 107, 107)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ponerCarta, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(decirUNO, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(penalizar)
                            .addComponent(cambioColorLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(81, 81, 81))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {decirUNO, penalizar, ponerCarta});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cambiarTurno, cerrarSesion, tomarCarta});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Baraja, cartasBarajaLbl});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Desecho, cartasDesechoLbl});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cartasBarajaLbl)
                            .addComponent(cartasDesechoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Desecho, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Baraja, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cambioColorLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(penalizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(decirUNO)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ponerCarta))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jugadorTurno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(37, 37, 37)
                                .addComponent(cerrarSesion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cambiarTurno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tomarCarta)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mano, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        
         
        implementacion.iniciarPartida();
        implementacion.repartirCarta();
        
        Desecho.setIcon(new ImageIcon( System.getProperty("user.dir")+"\\src\\cartas\\"+
              implementacion.getObjDesecho().obtenerDesecho().getTipo().toString()+implementacion.getObjDesecho().obtenerDesecho().getColor().toString()+".png"));

         llenarCartas(0);
        
        if(implementacion.getObjDesecho().obtenerDesecho().getTipo().toString().equals("tomaDos") && 
          !implementacion.verificarAumento(implementacion.getJugadores().get(implementacion.getTurno()).getMano()))
        {
            tomarCarta.setEnabled(true);
            cambiarTurno.setEnabled(false);
            ponerCarta.setEnabled(false);
            decirUNO.setEnabled(false);
            penalizar.setEnabled(false);
        }
        else if(implementacion.getObjDesecho().obtenerDesecho().getTipo().toString().equals("salta") || 
                implementacion.getObjDesecho().obtenerDesecho().getTipo().toString().equals("reversa"))
        {
            
            tomarCarta.setEnabled(false);
            cambiarTurno.setEnabled(true);
            ponerCarta.setEnabled(false);
            decirUNO.setEnabled(false);
            penalizar.setEnabled(false);
        }
        else
        {
            
            tomarCarta.setEnabled(true);
            cambiarTurno.setEnabled(false);
            ponerCarta.setEnabled(true);
            decirUNO.setEnabled(false);
            penalizar.setEnabled(false);
        }
        if(!implementacion.getObjDesecho().obtenerDesecho().getTipo().toString().equals("salta"))
        {
           implementacion.verificarCarta(implementacion.getObjDesecho().obtenerDesecho()); 
        }
        jugadorTurno.setText("Jugador: "+implementacion.getJugadores().get(implementacion.getTurno()).getNombre());
        cartasBarajaLbl.setText(Integer.toString(implementacion.getObjBaraja().getTope()));
        cartasDesechoLbl.setText(Integer.toString(implementacion.getObjDesecho().getDesecho().size()));
    }//GEN-LAST:event_formWindowOpened

    private void tomarCartaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tomarCartaActionPerformed
        
        Carta nuevaCarta = null;
        if(implementacion.getObjBaraja().getTope()>0)// si la baraja aun tiene cartas entonces...
        {                          
            for(int i=0; i<implementacion.getAcumulador(); i++)// se repetira el proceso de tomar dependiendo del numero acumulado de cartas
            {                                                  //este solo varia cuando colocan cartas como masDos o masCuatro, por lo general siempre es 1
                JLabel carta = new JLabel();
                nuevaCarta = implementacion.tomarCarta(implementacion.getJugadores().get(implementacion.getTurno()));
                carta.setIcon(new ImageIcon( System.getProperty("user.dir")+"\\src\\cartas\\"+nuevaCarta.getTipo()+nuevaCarta.getColor() +".png"));
                pCartas.add(carta);
                pCartas.updateUI();
                if(implementacion.getObjBaraja().getTope()==0)
                {
                    implementacion.finalizarBaraja();
                    cartasDesechoLbl.setText(Integer.toString(implementacion.getObjDesecho().getDesecho().size()));
                }                
            }
            //si el jugador come una carta y esta se puede jugar se le pregunta al jugador si quiere o no jugarla
            if(implementacion.getAcumulador() == 1 && implementacion.verificarCarta(nuevaCarta))
            {
               int respPoner = JOptionPane.showConfirmDialog(null, "La carta tomada ("+nuevaCarta.getTipo().toString()+" "+nuevaCarta.getColor().toString()+") es compatible con la carta en el desecho ¬øDesea ponerla?", "Poner Carta Tomada", JOptionPane.YES_NO_OPTION);
               if(respPoner == JOptionPane.YES_OPTION)
               {//si dice que si se coloca
                  implementacion.ponerCarta(implementacion.getJugadores().get(implementacion.getTurno()).getMano().size());
                  
                  //en caso de que la carta a poner sea un cambio color o un mas cuatro se pregunta el nuevo color
                  if(nuevaCarta.getTipo().toString().equals("cambioColor") || nuevaCarta.getTipo().toString().equals("masCuatro"))
                  {
                     String[] colores = {"amarillo","azul","rojo","verde"};
                     String color = (String) JOptionPane.showInputDialog(this, "Elija un color:", "Cambiar Color",JOptionPane.QUESTION_MESSAGE,null , colores, DISPOSE_ON_CLOSE);
                     implementacion.cambiarColor(color,nuevaCarta.getTipo().toString());
                     cambioColorLbl.setText("Nuevo Color: "+color);
                  }
                  Desecho.setIcon(new ImageIcon(System.getProperty("user.dir")+"\\src\\cartas\\"+nuevaCarta.getTipo().toString()+nuevaCarta.getColor().toString()+".png"));
                  pCartas.removeAll();
                  llenarCartas(implementacion.getTurno());
               }
               else//si dice que no se revierten los efectos del metodo verificarCarta en caso de que sea una carta especial
               {
                   implementacion.verificarCarta(nuevaCarta);
                   if(nuevaCarta.getTipo().toString().equals("salta"))
                   {
                      implementacion.setSaltar(false); 
                   }     
                   if(implementacion.getAcumulador()>1)
                   {
                       implementacion.setAcumulador(1);
                   }  
                   implementacion.setMasDos(false);
                   implementacion.setMasCuatro(false);
               }
            }
            else// si la carta tomada no se puede jugar entonces simplemente se desactivan los swichts para acumular y se 
            {   //reinicia la variable acumuladora en caso de que se hayan colocado previamente
               if(implementacion.getAcumulador()>1)
               {
                   implementacion.setAcumulador(1);
               } 
               implementacion.setMasDos(false);
               implementacion.setMasCuatro(false);
            }
            cartasBarajaLbl.setText(Integer.toString(implementacion.getObjBaraja().getTope())); 
            tomarCarta.setEnabled(false);
            ponerCarta.setEnabled(false);
            cambiarTurno.setEnabled(true);
            penalizar.setEnabled(false);
            if(implementacion.isDecirUNO())
            {
                decirUNO.setEnabled(true);
            }
        }
    }//GEN-LAST:event_tomarCartaActionPerformed

    private void cambiarTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarTurnoActionPerformed
       
        implementacion.cambiarTurno();
        pCartas.removeAll();
        llenarCartas(implementacion.getTurno());
        jugadorTurno.setText("Jugador: "+implementacion.getJugadores().get(implementacion.getTurno()).getNombre());
        if(!implementacion.isMasCuatro() && !implementacion.isMasDos())
        {
            implementacion.setAcumulador(1);
        }
        
        if((implementacion.isMasCuatro() && !implementacion.verificarAumento(implementacion.getJugadores().get(implementacion.getTurno()).getMano())) ||
            (implementacion.isMasDos() && !implementacion.verificarAumento(implementacion.getJugadores().get(implementacion.getTurno()).getMano())))
        {
            tomarCarta.setEnabled(true);
            cambiarTurno.setEnabled(false);
            ponerCarta.setEnabled(false); 
            decirUNO.setEnabled(false);
            penalizar.setEnabled(false);
        }
        else
        {
            tomarCarta.setEnabled(true);
            cambiarTurno.setEnabled(false);
            ponerCarta.setEnabled(true); 
            decirUNO.setEnabled(false);
            penalizar.setEnabled(false);
        }
        if (implementacion.isDecirUNO())
        {
            decirUNO.setEnabled(false);
            if(implementacion.getTurnoUNO()!=implementacion.getTurno())
            {
                penalizar.setEnabled(true);
            }   
        }
    }//GEN-LAST:event_cambiarTurnoActionPerformed

    private void ponerCartaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ponerCartaActionPerformed
            
       String resp = JOptionPane.showInputDialog(null,"Elija la carta a colocar:");//se le pregunta al usuario por la carta a colocar
       int cartE;
       Carta carta = null;
       if(resp!=null && isNumeric(resp) && !resp.equals("") && Integer.parseInt(resp)>0)//si lo que coloca es diferente es diferente de vacio es un numero >0 entra
       {
            if(Integer.parseInt(resp) <= implementacion.getJugadores().get(implementacion.getTurno()).getMano().size()) //se verifica que el numero colocado este entre el rango de cartas en la mano
            {
                 cartE = Integer.parseInt(resp);
                 carta = implementacion.getJugadores().get(implementacion.getTurno()).getMano().get(cartE-1);
                 
                 if(implementacion.isMasDos() && !carta.getTipo().toString().equals("tomaDos"))
                 {
                     JOptionPane.showMessageDialog(null, "solo puedes poner cartas de tipo tomaDos!");
                 }
                 else if(implementacion.isMasCuatro() && !carta.getTipo().toString().equals("masCuatro"))
                 {
                     JOptionPane.showMessageDialog(null, "solo puedes poner cartas de tipo masCuatro!");
                 }
                 else
                 {
                         if(implementacion.verificarCarta(carta))// se verifica que la carta sea compatible
                        {
                            //si es compatible se coloca
                            carta = implementacion.ponerCarta(cartE);
                            //se actualizan los iconos y los estados de los botones al colocar la carta
                            Desecho.setIcon(new ImageIcon(System.getProperty("user.dir")+"\\src\\cartas\\"+carta.getTipo().toString()+carta.getColor().toString()+".png"));
                            pCartas.removeAll();
                            llenarCartas(implementacion.getTurno());
                            cartasDesechoLbl.setText(Integer.toString(implementacion.getObjDesecho().getDesecho().size()));
                            tomarCarta.setEnabled(false);
                            cambiarTurno.setEnabled(true);
                            ponerCarta.setEnabled(false);
                            decirUNO.setEnabled(false);
                            penalizar.setEnabled(false);
                            //si el jugador se queda sin cartas se da por terminada la ronda y se verifica cuantos puntos tiene
                            if(implementacion.getJugadores().get(implementacion.getTurno()).getMano().isEmpty())
                            {
                                pCartas.removeAll();
                                pCartas.updateUI();
                                //se le agregan los puntos de la suma de cartas de los demas jugadores con el metodo sumarPuntos()
                                implementacion.getJugadores().get(implementacion.getTurno()).acumularPuntos(implementacion.sumarPuntos());
                                JOptionPane.showMessageDialog(null, "Felicidades terminaste la ronda!\nJugador: "+implementacion.getJugadores().get(implementacion.getTurno()).getNombre()+"\nPuntaje: "+implementacion.getJugadores().get(implementacion.getTurno()).getPuntos());
                                if(implementacion.getJugadores().get(implementacion.getTurno()).getPuntos()>=500)//si la sumatoria de puntos da 500 o mas el jugador que termino la ronda                                                                                     
                                {                                                                                // habra ganado el juego.
                                   JOptionPane.showMessageDialog(null,"Felicidades "+implementacion.getJugadores().get(implementacion.getTurno()).getNombre()+" has ganado!");
                                   implementacion.finJuego();
                                   System.exit(0);
                                }
                                else//sino se reinicia la partida llamando al evento de apertura del formulario
                                {
                                  java.awt.event.WindowEvent evento = null;
                                  this.formWindowOpened(evento); 
                                }
                            }

                            if(carta.getTipo().toString().equals("cambioColor") || carta.getTipo().toString().equals("masCuatro"))// si la carta colocada es un comodin negro se pregunta el color con el cual se jugara el siguiente turno
                            {
                                String[] colores = {"amarillo","azul","rojo","verde"};
                                String color = (String) JOptionPane.showInputDialog(this, "Elija un color:", "Cambiar Color",JOptionPane.QUESTION_MESSAGE,null , colores, DISPOSE_ON_CLOSE);
                                implementacion.cambiarColor(color,carta.getTipo().toString());
                                cambioColorLbl.setText("Nuevo Color: "+color);
                            }
                        }
                        else//si la carta no es compatible se le avisara a el usuario para que elija otra
                        {
                             JOptionPane.showMessageDialog(null, "La carta que desea colocar no coincide con la carta en el desecho!");
                        }                     
                 } 
                 if(implementacion.isDecirUNO())//si al poner la carta queda solo una se habilitara el boton para decir uno
                 {
                    decirUNO.setEnabled(true);
                    penalizar.setEnabled(false);
                 }
            } 
            else
            {
                if(Integer.parseInt(resp) > implementacion.getJugadores().get(implementacion.getTurno()).getMano().size())
                {
                    JOptionPane.showMessageDialog(null, "El numero que eligi√≥ sobrepasa al numero de cartas en la mano");
                }
            }      
       }
       else
       {
           if(resp!=null && !isNumeric(resp))
           JOptionPane.showMessageDialog(null, "Ingrese el numero de la posicion correspondiente de la carta a colocar"); 
       }
    }//GEN-LAST:event_ponerCartaActionPerformed

    private void decirUNOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decirUNOActionPerformed

        if(implementacion.decirUno())
        {
            implementacion.setDecirUNO(false);           
        }
        decirUNO.setEnabled(false);
        penalizar.setEnabled(false);
    }//GEN-LAST:event_decirUNOActionPerformed

    private void penalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_penalizarActionPerformed
       if(implementacion.decirUno())//si el metodo decir uno es verdadero quiere decir que el jugador con una carta 
        {                                   //debe ser penalizado comiendo 2 cartas
            for (int i = 0; i < 2; i++) {   
                implementacion.tomarCarta(implementacion.getJugadores().get(implementacion.getTurnoUNO()));
            }
        }
        decirUNO.setEnabled(false);
        implementacion.setDecirUNO(false);
        penalizar.setEnabled(false);
    }//GEN-LAST:event_penalizarActionPerformed

    private void cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarSesionActionPerformed
        
        // se pregunta a el usuario para confirmar el cierre de sesion
        int respCerrar = JOptionPane.showConfirmDialog(null, "¬øSeguro que desea cerrar la sesi√≥n?", "Cerrar Ses√≠on", JOptionPane.YES_NO_OPTION);

        if(respCerrar==JOptionPane.YES_OPTION)
        {// si la respuesta es si se cierra la sesion y se llena el panel con las cartas del jugador siguente
            implementacion.cerrarSesion(implementacion.getJugadores().get(implementacion.getTurno()));
            implementacion.cambiarTurno();
            cartasBarajaLbl.setText(Integer.toString(implementacion.getObjBaraja().getTope()));
            pCartas.removeAll();
            pCartas.updateUI();  
            llenarCartas(implementacion.getTurno());
            jugadorTurno.setText("Jugador: "+implementacion.getJugadores().get(implementacion.getTurno()).getNombre());
            if(implementacion.getJugadores().size()<2)//si la cantidad de jugadores es <2 se dara por finalizado el juego
            {
                JOptionPane.showMessageDialog(null, "Lo sentimos el juego no puede continuar con un jugador");
                System.exit(0);
            }
        }
    }//GEN-LAST:event_cerrarSesionActionPerformed

    /**
     * En este metodo se utiliza para dibujar la imagen de la carta en el Jlabel
     * @param tipo En este parametro recibe el tipo de la carta
     * @param color En este parametro recibe el color de la carta
     */
    public void dibujarCarta(String tipo, String color)
    {
        JLabel carta = new JLabel();
        carta.setIcon(new ImageIcon(System.getProperty("user.dir")+"\\src\\cartas\\"+tipo+color+".png"));
        pCartas.add(carta);
        pCartas.updateUI(); 
    }

    /**
     * En este metodo llena las cartas del jugador que este en turno
     * @param turno Recibe como parametro el turno del jugador actual
     */
    public void llenarCartas(int turno)
    {
        for(Carta manoActual: implementacion.getJugadores().get(turno).getMano())
        {
            dibujarCarta(manoActual.getTipo().toString(),manoActual.getColor().toString());
        }
    }
    
    /**
     * En este metodo se verifica si una cadena de caracteres es numerica o tiene solo numeros en sus caracteres
     * @param cadena utiliza como parametro una variable tipo string con la cual se verifica si es numerica o no
     * utilizando una varible tipo NumberFormat.
     * @return retorna un boolean donde es true si la cadena es solamente numerica y false si tiene algun caracter diferente a numerico
     */
    public boolean isNumeric(String cadena)
    {
        NumberFormat formatter = NumberFormat.getInstance();
        ParsePosition pos = new ParsePosition(0);
        formatter.parse(cadena, pos);
        return cadena.length() == pos.getIndex();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UnoInterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UnoInterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UnoInterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UnoInterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UnoInterfazGrafica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Baraja;
    private javax.swing.JLabel Desecho;
    private javax.swing.JButton cambiarTurno;
    private javax.swing.JLabel cambioColorLbl;
    private javax.swing.JLabel cartasBarajaLbl;
    private javax.swing.JLabel cartasDesechoLbl;
    private javax.swing.JButton cerrarSesion;
    private javax.swing.JButton decirUNO;
    private javax.swing.JLabel jugadorTurno;
    private javax.swing.JScrollPane mano;
    private javax.swing.JPanel pCartas;
    private javax.swing.JButton penalizar;
    private javax.swing.JButton ponerCarta;
    private javax.swing.JButton tomarCarta;
    // End of variables declaration//GEN-END:variables
}
